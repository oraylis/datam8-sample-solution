# Macro Import ----------
{% import 'macro/column_declaration_stage.jinja2' as column_declaration %}
{% import "macro/common_python_snippets.py.jinja2" as py_snippets %}

{%- set payload = Payload(model) %}
{%- set table_payload = payload.get_payload_ddl_stage() %}

{%- for entity in table_payload %}
    {%- set column_payload = payload.get_ddl_stage_column(entity.locator) %}
>>>>>>>>>> {{ entity.file_path }}.py | py
# Databricks notebook source
# MAGIC %md
# MAGIC # DDL for {{ entity.layer_full_table_name }}

# COMMAND ----------

{% include "__collections/include/ddl_type_mapping.py.jinja2" %}

# COMMAND ----------

# MAGIC %md
# MAGIC ## Get variable values

# COMMAND ----------

{{ py_snippets.common_variables(entity.layer_name, entity.table, SystemProperties) }}

# COMMAND ----------

{{ column_declaration.ddl_struct_type(column_payload) }}

# COMMAND ----------

# DBTITLE 1,Define new partitions
{%- set partitions = (
    "__Year",
    "__Month",
    "__Day",
    "__InsertTimestampUTC",
) %}
new_partitions = (
  {%- for p in partitions %}
  "{{p}}",
  {%- endfor %}
)

# COMMAND ----------

# DBTITLE 1,Define DDL statement
ddl = """
CREATE TABLE `%(catalog)s`.`%(schema)s`.`%(table)s`
(
    {{ column_declaration.ddl_column_declaration(column_payload) }}
)
USING DELTA
PARTITIONED BY (
{%- for p in partitions %}
    `{{p}}`{{ "," if not loop.last }}
{%- endfor %}
)
""" % {
    "catalog": catalog.name,
    "schema": zone,
    "table": full_table_name,
}

# COMMAND ----------

# DBTITLE 1,Define refactored columns
refactored_columns = []

# COMMAND ----------

{% include "__collections/include/ddl_schema_migration.py.jinja" %}

# COMMAND ----------

<<<<<<<<<<
{%- endfor -%}
